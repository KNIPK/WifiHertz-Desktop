/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package WiFiHertzPackage;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author Łukasz
 */
public class choiserJPanel extends javax.swing.JPanel implements PropertyChangeListener {

    private JFileChooser jfc;
    private Image img;

    /**
     * Creates new form choiserJPanel
     */
    public static void main(String[] args) 
    {
        JFileChooser jfc = new JFileChooser();
        LokalizujNapisyPL(jfc);
        choiserJPanel preview = new choiserJPanel(jfc);
        jfc.addPropertyChangeListener(preview);
        jfc.setAccessory(preview);
        jfc.showOpenDialog(null);
    }
    public static void LokalizujNapisyPL(javax.swing.JComponent komponent)
    {
                UIManager.put("FileChooser.openDialogTitleText", "Otwórz");
                UIManager.put("FileChooser.lookInLabelText", "Szukaj w : ");
                UIManager.put("FileChooser.openButtonText", "Otwórz");
                UIManager.put("FileChooser.cancelButtonText", "Anuluj");
                UIManager.put("FileChooser.fileNameLabelText", "Nazwa pliku : ");
                UIManager.put("FileChooser.filesOfTypeLabelText", "Typ plików : ");
                UIManager.put("FileChooser.openButtonToolTipText", "Otwórz wybrany plik");
                UIManager.put("FileChooser.cancelButtonToolTipText","Anuluj");
                UIManager.put("FileChooser.fileNameHeaderText","Nazwa pliku : ");
                UIManager.put("FileChooser.upFolderToolTipText", "Poziom wyżej");
                UIManager.put("FileChooser.homeFolderToolTipText","Pulpit");
                UIManager.put("FileChooser.newFolderToolTipText","Twórz nowy folder");
                UIManager.put("FileChooser.listViewButtonToolTipText","Lista");
                UIManager.put("FileChooser.newFolderButtonText","Nowy folder");
                UIManager.put("FileChooser.renameFileButtonText", "Zmień nazwę pliku");
                UIManager.put("FileChooser.deleteFileButtonText", "Usuń plik");
                UIManager.put("FileChooser.filterLabelText", "Typ pliku : ");
                UIManager.put("FileChooser.detailsViewButtonToolTipText", "Szczegóły");
                UIManager.put("FileChooser.fileSizeHeaderText","Rozmiar");
                UIManager.put("FileChooser.fileDateHeaderText", "Zmodyfkowano");
                SwingUtilities.updateComponentTreeUI(komponent);  
    }
    public choiserJPanel(JFileChooser jfc) {
        this.jfc = jfc;
        Dimension sz = new Dimension(200, 200);
        setPreferredSize(sz);
    }

    public choiserJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void updateImage(File file) throws IOException {
        if (file == null) {
            return;
        }
        img = ImageIO.read(file);
        repaint();
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        try {
            System.out.println("updating");
            File file = jfc.getSelectedFile();
            updateImage(file);
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }
    }

    public void paintComponent(Graphics g) {
        // fill the background
        g.setColor(Color.gray);
        g.fillRect(0, 0, getWidth(), getHeight());

        if (img != null) {
            // calculate the scaling factor
            int w = img.getWidth(null);
            int h = img.getHeight(null);
            int side = Math.max(w, h);
            double scale = 200.0 / (double) side;
            w = (int) (scale * (double) w);
            h = (int) (scale * (double) h);
            // draw the image
            g.drawImage(img, 0, 0, w, h, null);

            // draw the image dimensions
            String dim = w + " x " + h;
            g.setColor(Color.black);
            g.drawString(dim, 31, 196);
            g.setColor(Color.white);
            g.drawString(dim, 30, 195);
        } else {
            // print a message
            g.setColor(Color.black);
            g.drawString("Not an image", 30, 100);
        }
    }
}
